#!/bin/bash

# =====================================
# we output messages to stdout and also stderr to simplify debugging since logs are usually in 
# separate files and we want to see where errors are happening in the script
function debug_output1() {
    echo
    echo "=====================================" 
    echo "===== $1"
    echo "====================================="
} 

function debug_output() {
    debug_output1 $1 | tee >(cat >&2)
} 

# =====================================
debug_output "post install hook"
mount_path={{ env.mount }}
echo RUNNING IN $mount_path
config_path={{ env.config }}
echo config is in $config_path

# =====================================
debug_output "environment variables"
printenv

# =====================================
debug_output "create post file $mount_path/post"
echo "$(date)" > "$mount_path/post"

# =====================================
debug_output "set vars we need frequently"
HOME=$(pwd)
SPACK_CMD="spack -C $config_path"

# =====================================
debug_output "list all spack packages"
$SPACK_CMD find -flv

# =====================================
debug_output "list all spack environments"
SPACK_ROOT=$( $SPACK_CMD location -r )
source $SPACK_ROOT/share/spack/setup-env.sh

# =====================================
debug_output "convert stackinator environment into a package"
python3 $HOME/store/meta/recipe/env-to-package.py $HOME/store/meta/recipe/environments.yaml 
# remove explicit gcc version as this causes a concretization error
sed -i 's/%gcc//g' $(spack location -p temppackage)/package.py

# =====================================
debug_output "create build-env"
BUILD_ENV=$mount_path/paraview-buildenv.rc
SPEC="temppackage %gcc@12.3"
$SPACK_CMD -e $HOME/environments/icon-dsl-paraview/ env activate --sh
$SPACK_CMD -e $HOME/environments/icon-dsl-paraview/ add $SPEC
$SPACK_CMD -e $HOME/environments/icon-dsl-paraview/ concretize
$SPACK_CMD -e $HOME/environments/icon-dsl-paraview/ build-env --dump $BUILD_ENV "$SPEC"

# =====================================
debug_output "create $mount_path/src dir"
mkdir -p $mount_path/src
cd $mount_path/src

# =====================================
debug_output "clone paraview"
PARAVIEW_VERSION=5.12.0

# get default paraview master branch
git clone https://gitlab.kitware.com/paraview/paraview.git
cd $mount_path/src/paraview

debug_output "switch to version ${PARAVIEW_VERSION} from tag v${PARAVIEW_VERSION}"
git checkout -b ${PARAVIEW_VERSION} v${PARAVIEW_VERSION}
git submodule update --init --recursive

# =====================================
debug_output "Update VTK Submodules"
cd $mount_path/src/paraview/VTK
git submodule update 

# =====================================
debug_output "change to 2.1.0 branch of vtk-m"
cd $mount_path/src/paraview/VTK/ThirdParty/vtkm/vtkvtkm/vtk-m
git checkout v2.1.0

# =====================================
debug_output "source build-env"
source $BUILD_ENV

# =====================================
debug_output "run cmake on paraview"
mkdir -p $mount_path/build/pv && cd $mount_path/build/pv
cmake -G Ninja \
    -DCMAKE_INSTALL_PREFIX=$mount_path/paraview \
    -DPARAVIEW_USE_QT=OFF \
    -DPARAVIEW_INSTALL_DEVELOPMENT_FILES=ON \
    -DPARAVIEW_USE_MPI=ON \
    -DVTK_USE_X=OFF \
    -DVTK_OPENGL_HAS_EGL=ON \
    -DPARAVIEW_USE_PYTHON=ON \
    -DPARAVIEW_ENABLE_CATALYST=YES \
    -Dcatalyst_DIR=$($SPACK_CMD location -i libcatalyst) \
    -DPARAVIEW_USE_CUDA=OFF \
    -DCMAKE_CUDA_ARCHITECTURES=90 \
    -DPARAVIEW_BUILD_WITH_EXTERNAL=ON \
    -DVTK_MODULE_USE_EXTERNAL_VTK_fast_float=OFF \
    -DVTK_MODULE_USE_EXTERNAL_VTK_token=OFF \
    -DVTK_MODULE_USE_EXTERNAL_VTK_exprtk=OFF \
    -DVTK_MODULE_USE_EXTERNAL_VTK_verdict=OFF \
    -DVTK_MODULE_USE_EXTERNAL_VTK_libharu=OFF \
    -DVTK_MODULE_USE_EXTERNAL_VTK_cli11=OFF \
    -DVTK_MODULE_USE_EXTERNAL_VTK_ioss=OFF \
    -DVTK_MODULE_USE_EXTERNAL_VTK_cgns=OFF \
    $mount_path/src/paraview/

    # -DVTK_MODULE_USE_EXTERNAL_VTK_doubleconversion=OFF \
    # -DVTK_MODULE_ENABLE_VTK_cgns=NO \
    # -DVTK_MODULE_ENABLE_ParaView_VTKExtensionsIOCGNSWriter=NO \
    # -DVTK_MODULE_ENABLE_ParaView_VTKExtensionsIOParallelCGNSWriter=NO \
    # -DVTK_MODULE_ENABLE_VTK_IOCGNSReader=NO \
    # -DVTK_MODULE_ENABLE_VTK_ioss=NO \

# =====================================
debug_output "build and install paraview"
ninja 
ninja install
ninja clean

PARAVIEW_DIR=$mount_path/paraview
PARAVIEW_VERSION=5.12

# =====================================
debug_output "build icon"

# =====================================
debug_output "build paraview plugin"
cd $mount_path/src
git clone https://github.com/jfavre/ParaViewGadgetPlugin
mkdir $mount_path/build/ParaViewGadgetPlugin && cd $mount_path/build/ParaViewGadgetPlugin

cmake -G Ninja \
    -DParaView_DIR=$PARAVIEW_DIR/lib64/cmake/paraview-$PARAVIEW_VERSION \
    -DCMAKE_INSTALL_PREFIX=$mount_path/paraview-plugins \
    $mount_path/src/ParaViewGadgetPlugin       
ninja
ninja install
ninja clean

# =====================================
debug_output "set permissions"
chmod -R a+r $BUILD_ENV
chmod -R a+r $mount_path/src
chmod -R a+r $mount_path/build
chmod -R a+r $mount_path/paraview
chmod -R a+r $mount_path/paraview-plugins

# =====================================
debug_output "Done"
